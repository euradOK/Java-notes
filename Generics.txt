Generics
---------
The main objectives of Generics are 
	To provide Type Safety and 
	To Resolve Type Casting problems.

	CASE1: TYPE SAFETY
----------------------------------
-Arrays are type safe that is we can give the guarantee for the type of element present inside array.
-For example if our progarm requirement is to hold only string type of objects we can choose string array. By mistake if you trying to 
any type of object you will get compile time error.

Example:
String [] s=new String [1000];
	s[0]="durga";
	s[1]="Ravi";
	s[2]=new Interger(10); //CE: Incompatible types found: java.lang.Interger  Required:java.lang.String

-Hence String array can contain String type of object due to this we can give guarantee for type of elements present inside arrays,
hence arrays are safe to use with respect to type that is array is type safe.

But collections are not Type safe that is we cant give the guarantee for the type of element present in collection.
For Example if our progaramme requirement is to hold only string type of object and if we choose arraylist, By mistake if we are trying to add any type 
of object we wont get any compile time eroor but progaram may fail at Runtime.

	ArrayList l=new ArrayList();
	l.add("eurad");
	l.add("emma");
	l.add(new Interger(10));

Getting Elements from ArrayList
	String name1=(String)l.get(0);
	String name2=(String)l.get(1);
	String name3=(String)l.get(2); 

	RE:ClassCastException

Hence we cant give the guarantee for the type of elements present inside collection due to this collections are not safe to use with respect to type that is 
collections are not type safe.


	CASE2: TYPECASTING
------------------------------------
In the case of arrays at the time of retrieval it is not required to perform type casting because there is guarantee for type of element inside array.
Example:
String[] s=new String [1000];
s[0]= "eurad";
 
Retrieval
String name=s[0];  //type casting not allowed 

But in the case of collections at the time of retrieval compulsory we should perform type casting because there no guarantee for the type of elements present inside
collections.
Example:
ArrayList l= new ArrayList();
l.add("eurad");

Retrieval
String name1=l.get(0);

CE:incopatible type found java.lang.Object Required:java.lang.String

String name1=(String)l.get(0);  //typecasting

Hence Typecasting is bigger headache in collections.
To overcome above problems of collections Sun people introduced Generics concept in 1.5v.
Hence the main objectives are:
	To provide type safety 
	To Resolve type casting problems.




	ASSERTIONS
-----------------------------
INTRODUCTION
Very common way of debbuging is usage of SOP statement.But the problem of SOP is after fixing the bug cumposulsory we have to delete SOP statement
otherwise these SOP will be excuted at Runtime for every request, which creates performance problems and disturbs server logs.

To overcome these problems some people introduced Assertions concepts in 1.4 Version.

The main advantages of Assertions when compared to SOP is after fixing the bug we are not requred to remove assert statements because the wont be excuted by default 
at Runtime. Based on our requirement we can enable and disable assertions. And by Default Assertions are Disabled.

Hence the main objective of Assertions is to perform Debbuging.
Ussually we can perform debbugging in development and test environment but not in production environment hence assertions concepts applicable for Development 
and Test environment but not in production.

Assert keyword introduced in 1.4V hence from 1.4V  onwards we cant use assert as identifier otherwise we will compile time error.

	
