Arrays:
======
An array is indexed collection of fixed number of homogenous data elements.
The main advantage of array is we can repsent multiple values by using single varibale 
so that readability of code will be improved.

Limitations of Arrays:
======================
01.Arrays are fixed in size i,e once we create an array there is no chance of increasing 
or decreasing size based on requirement due to this to use Arrays concept complusory 
we should know the size in advance which may not possible always.

02.Arrays can hold only homogenous data type elements.
Example:
Student[] s=new Student[1000];
s[0]=new Student();		//valid 
s[1]=new Customer();	//CE:Incompatible types found: Customer Required:Student

We can solve this problem by using Object type Arrays
Example:
Object[] a=new Object[1000];
a[0]=new Student();		//valid
a[1]=new Customer();	//Valid

03.Arrays concepts is not implemented based some standard data structure and hence 
ready made method support is not available.
For every requirement we have to write a code explicitly, which increases the 
complexity of code.

Collections:
===========
To overcome the above problems of arrays we should go for Collections concepts.
Collections are growable in nature i,e based on our requirement we can increase 
or decrease size.

Collections can hold both homogenous and heterogenous objects.

Every Collections class is implemented based on some standard data structure hence 
for every requirement ready made method support is available.

Being a programmer we are responsible to use those methods and we are not responsible
to implement those methods.

Difference Collections vs Arrays:
=================================

01.Arrays is fixed in size i,e once we create an Arrays we can not increase or decrease 
size based on our requirements.
Collections are growable in nature i,e based on our requirement we can increase or 
decrease the size.

02.With respect to memory Arrays are not recommended to use.(Arrays are inbuild feature 
of java while Collections are from API.
With respect to memory Collections are recommeded to use.

03.With respect to performance Arrays are recommended to use.
With respect to performance Collections are not recommended to use.

04.Arrays can hold only homogenous data type elements.
Collections can hold both homogenous and heterogenous elements.

05.There is no underlying datastructure for Arrays and hence ready made method 
support is not available.
For every requirement we have to write a code explicitly which increase complexity 
of programming.

Every Collection class is implemented based on some standard data structure and hence
for every requirement ready made method support is available.Being a programmer we 
can use these method directly and we not responsible to implement those methods.

06.Arrays can hold both primitives and Objects.
Collections can hold only Object types but not primitives.



	Collections:
	============
if we want to repsent a groups of individual object as a single entity then we should 
go for Collection.

Collection framework it contains several classes and interfaces which can be used to 
repsent a group of individual object as single entity.


	9 key interfaces of Collection Framework:
	=========================================
1.Collection 
2.List
3.Set 
4.SortedSet
5.NavigableSet
6.Queue
7.Map 
8.SortedMap
9.NavigableMap
==================================================

1.Collection(I)
---------------
-if we want to represent a group of individual objects as single entity then we should 
go for collection.
-Collection interface defines the most common methods which are applicable for any 
collection object.
-In generally Collection interface is considered as root interface of Collection
Framework.
-There is no concrete class which implements collection interface directly.

Difference between Collection and Collections:
----------------------------------------------
Collection is an interface.
if we want to represent a group of individual object as a single entity then we 
should go for Collection.

-Collections is an utility class present in java.util class to define several utility 
methods for collection objects(Like sorting,seaching etc)


2.List(I)
----------
-It is child interface of Collection(I).
-if we want to represent a group of individual object as a single entity where duplicates 
are allowed and insertion order must be preserved then we should go for List.
-List contain ArrayList,LinkedList,Vector and Stack. 

3.Set(I)
--------
-It is child interface of Collection.
-if we want to represent a group of individual object as a single entity where duplicates
are not allowed and insertion oder not required then we should go for set interface.

4.SortedSet(I)
------------.
-It is child interface of Set(I).
-if we want to represent a group of individual object as a single entity where duplicates
are not allowed and all object should be inserted according to some sorting order
then we should go for SortedSet.

5.NavigableSet(I)
-----------------
-It is child interface of SortedSet(I).
-It contains several methods for navigation purposes.
-The implementation class for NavigableSet(I) is TreeSet.

Collection-->Set(I)-->SortedSet(I)-->NavigableSet(I)--->TreeSet

Differences between List and Set:
---------------------------------
List							Set
----							---
-Duplicates are allowed			Duplicates are not allowed	
-insertion order preserved.		insertion order not preserved.

6.Queue(I)
----------
-Queue(I) is a child interface of Collection(I).
-if we want to represent a group of individual object prior to processing then we 
should go for Queue(I). Usually Queue follows FIFO order but based on requirement 
we can implement our own priority order also.
-Implememtation class of Queue are PriorityQueue,BlockingQueue,LinkedBlockingQueue....

All above interfaces Collections,List,Set,SortedSet,NavigableSet and Queue meant for 
repsenting a group of individual objects.

If we want to repsent a group of object as key value pairs then we should go for Map.

7.Map(I)
--------
Map is not child interface of Collection.
If we want to repsent a group of object as key value pairs then we should go for Map.
Example:

key			value
==================
S.no		name
-----------------
101			eurad
102			emma
103			Ruba
-----------------

Both Key and value are objects only.
Duplicates keys are not allowed but value can be duplicated.

Implementation class of Map are HashMap,LinkedHashMap,WeakHashMap,IdentityHashMap,
Hashtable,Dictionary,Properties.

8.SortedMap(I)
--------------
-It is child interface of Map.
If we want to repsent a group of object as key value pairs according to some sorting 
order of keys then we should go SortedMap.
-In SortedMap the sorting should be based on key but not based on value.

9.NavigableMap(I)
-----------------
--It is child interface of SortedMap.
-It defines several methods for navigation purposes.
-Implementaion class is TreeMap.

Map-->SortedMap-->NavigableMap-->TreeMap.

The following are legacy character present in collaction Framework:
-Enumeration(I)
-Dictionary(AC)
-Vector(C)
-Stack(C)
-Hashtable(C)
-Properties(C)


Collection(I)
-------------
-if we want to represent a group of individual objects as single entity then we should 
go for Collection.
-Collection interface defines the most common methods wich are applicable for any
Collection Object.
-There is no concrete class which implement collection interface directly.

Methods for Collection interface:
---------------------------------
boolean add(Object o)
boolean addAll(Collection c)
boolean remove(object o)
boolean removeall(Collection c)
boolean retainAll(Colleaction c)
	To remove all object except those present in c.
boolean contains (Object o)
boolean containsAll(Collection c)
boolean isEmpty()
int size();
Object[] toArray();
Iterator iterator();
-------------------------------------------------------

List(I)
--------
-It is child interface of Collection(I).
-if we want to represent a group of individual object as a single entity where duplicates 
are allowed and insertion order must be preserved then we should go for List.

-We can preserve insertion order via index and we can differentiate duplicate object 
by using index hence index we will play very important role in List.

-List interface defines the following specific methods:
void add(int index,Object o)
boolean addAll(int index,Collection o)
Object get(int index)
Object remove(int index)
Object set(int index,Object new)
	To repalce the element present at specifed index with provided Object and return
	old Object.
int indeOf(Object o)
	return index of first occurance of 'o'
int lastIndexOf(Object o)
ListIterator listIterator();

ArrayList
---------
-The underlying datastructure is resizable array or growable array
-Duplicates are allowed
-Insertion order is preserved
-Heterogenous Object are allowed(except TreeSet and TreeMap everywhere heterogenous
object is allowed.
-null insertion is possible.

Constructors:
-------------
1.ArrayList l=new ArrayList();
Creates an empty arraylist with default initial capacity 10.
Once ArrayList reaches its max capacity then a new ArrayList will be created with 
new capacity =(cuurent capacity*3/2)+1 

2.ArrayList l=new ArrayList(int initialization);
Creates an empty ArrayList with specified inial capacity.

3.ArrayList l=new ArrayList(Collection c);
Creates an equivalent ArrayList Object for a given Collection.

Example:
import java.util.*;
class ArrayListDemo
{
	public static void main(String[] args)
	{
		ArrayList l=new ArrayList();
		l.add("A");
		l.add(10);
		l.add("A");
		l.add(null);
		System.out.println(l);//[A,10,A,null]
		l.remove(2)
		System.out.println(l);//[A,10,null)
		l.add(2,"M")
		l.add("N");
		System.out.println(l);//[A,10,M,N)
	
	}
}

-Usually we can use collections to hold and transfer objects from one location 
to another(container).
-To provide support for this requirement every collection class by default imprements
Seriaizable and clonable interfaces.
-Arraylist and Vector classes imprements RandomAccess interface so that any random 
element we can access with the same speed hence Arraylist is the best for random
access elements.

RandomAccess:
-------------
RandomAccess interface present in java.util package and doesnt contain any method 
it is a marker interface,where required ability will be provided automatically 
by the JVM.

Example:
ArrayList l1=new ArrayList();
LinkedList l2=new LinkedList();
System.out.println(l1 instanceof Serializable );	//true
System.out.println(l2 instanceof Cloneable);		//true
System.out.println(l1 instanceof RandomAccess );	//true
System.out.println(l2 instanceof RandomAccess );	//true

-ArrayList is the best choice if our frequent operation is retrive operation because 
arraylist imprements RandomAccess interface.
-ArrayList is the worst choice if our frequent operation is insertion or deletion in 
the middle.

Differences btn ArrayList and Vector:
--------------------------------------
ArrayList
---------
-Every method present in arraylist is non-syncronized.
-At a time multiple Thread is allowed to operate on ArrayList object and hence it is not 
Thread safe.
-Relatively performance is high beacuse Thread are not required to wait to opearate on 
ArrayList Object.
-Introduced in 1.2 Version and it is non-legacy.

Vector
------
-Every method present in Vector is non-syncronized.
-At a time only Thread is allowed to operate on Vector object and hence it is a Thread safe.
-Relatively performance is low beacuse Thread are  required to wait to opearate
on Vector Object.
-Introduced in 1.0 Version and it is legacy.


How to get syncronized Version of ArrayList Object:
---------------------------------------------------
-By default ArrayList is non-syncronized but we can get syncronized version of ArrayList 
object by using SynchronizedList() method of Collections class.
public static List SynchronizedList(List I);

Similarly we can get synchronized version of Set and Map object by using the following 
method of Collections class.
public static Set synchronizedSet(Set s)
public static Map synchronizedSet(Map m)


LinkedList:
-----------
The underlying datastructure is double linkedList.
-Insertion order is preserved.
-Duplicate objects are allowed.
-Heterogenous objects are allowed.
-Null insertion is possible.
-LinkedList implements Serializable and Cloneable interfaces but not RandomAccess.
-LinkedList is best choice if our frequent operation is insertion or deletion in
the middle.
-LinkedList is the worst choice if our frequent operation is retrieve operation.

Constructors:
-------------
1.LinkedList l=new LinkedList()
-Creates an empty linkedlist object.

2.LinkedList l=new LinkedList(Collection c)
-Creates an equivalent linkedlist object for the given Collection.

LinkedList class spefic method.
-------------------------------
Usually we can use linked list to develop stack and Queue.
To provide support for this requirement LinkedList define the following method.
void addFirst(Object o)
void addLast(Object o)
Object getFirst()
Object getLast()
Object removeFirst()
Object removeLast()

Example:
import java.util.*;
class LinkedListDemo
{
	public static void main(String[] args)
	{
		LinkedList l=new LinkedList();
		l.add("eurad");
		l.add(30);
		l.add(null);
		l.add("eurad");			//[eurad,30,null,eurad]
		l.set(0,"software");	//[software,30,null,eurad]
		l.add(0,"venky");		//[venky,software,30,null,eurad]
		l.removeFirst();		//[software,30,null,eurad]
		l.removeLast();			//[software,30,null]
		l.addFirst(CC);			//[CC,software,30,null]
		System.out.println(l);	//[CC,software,30,null]
	}
}


Differences between LinkedList and ArrayList:
----------------------------------------------
ArrayList:
----------
1.ArrayList is the best choice if our frequent operation is retrieve operation.
2.ArrayList is worst choice if our frequent operation is insertion or deletion in
the middle because internally several shift operation are performed.
3.In ArrayList the element will be stored in consecutive memory location and hence 
retrieve operation will become easy.

LinkedList:
----------
1.LinkedList is best choice if our frequent operation is insertion or deletion in
the middle.
2.LinkedList is the worst choice if our frequent operation is retrieve operation.
3.In LinkedList the element will not be stored in consecutive memory location and hence 
retrieve operation will become complex/difficult.


Vector:
-------
1.The underlying datastructure is resizeable array or growable array.
2.Insertion order is preserved.
3.Duplicates are allowed.
4.Heterogenous object are allowed.
5.Null insertion is possible.
6.It imprements Serializable,Cloneable and RandomAccess interfaces.
7.Every method present in the vector is synchronized and hence Vector Object
is Thread safe.

Constructors:
-------------
1.Vector v=new Vector()
-creates an empty vector object with default initial capacity 10.
-Once vector reaches its max capacity,then a new Vector object will be with new 
capacity=current capacity *2.

2.Vector v=new Vector(int initialCapacity)
-Creates an empty Vector Object with specified initial capacity.

3.Vector v=new Vector(int initialCapacity,int incrementcapacity)

4.Vector v=new Vector(Collection c)
-Creates an equivalent vector object for the given Collection.
-This constructor meant for interconvention between Collection Object.

Vector Specific methods:
------------------------
1.To add Object 
add(Object o)-------C
add(int index,Object o)----L
addElement(Object o)-----V

2.To Remove Object
remove(Object o)----V
remove(int index)----L
removeElementAt(int index)----V
clear()----C
removeAllElements()----V

3.To get Objects
Object get(int index)---L
Object elementAt(int index)----V
Object firstElement()---V
Object lastElement()----V

4.other Methods
int size()
int capacity()
Enumeration elements()

Example:
import java.util.*;
class Test
{
	public static void main(String[] args)
	{
		Vector v=new Vector();
		System.out.println(v.capacity());		//10
		for (int i=1; i<=10;i++ )
		{
			v.addElement(i);
		}
		System.out.println(v.capacity());		//10
		v.addElement("A");
		System.out.println(v.capacity());		//20
		System.out.println(v);					//[1,2,3,4,5,6,7,8,9,10,A]
	}
}

Stack:
------
-It is a child class of Vector.
It is specially designed class for Lastin Firstout order(LIFO)

Constructor:
Stack s=new Stack();

Methods:
Object push(Object o)
	To insert an object into Stack.

Object pop()
	To remove and return top of the Stack.

Object peek()
	To return top of Stack without removal

boolean Empty()
	Return true if Stack is empty

int search(Object o)
	Return offset if element is available otherwise returns -1

Example:
import java.util.*;
class Test
{
	public static void main(String[] args)
	{
		Stack s=new Stack();
		s.push("A");
		s.push("B");
		s.push("C");
		System.out.println(s);		//[A,B,C]
		System.out.println(s.search("A"));	//3
		System.out.println(s.search("z"));	//-1
	}
}

Three (3) cursors of Java:
--------------------------
if we want to get object one by one from the Collection then we should go for cursors.
There are 3 types of cursors available in java.
1.Enumeration
2.Iterator
3.ListIterator

Enumeration:
------------
We can use Enumeration to get object one from legacy Collection object.
We can create Enumeration object by using elements() method of vector class.
example:
Enumeration e=v.elements();  //v is vector object.

Methods:
public boolean hasMoreElements()
public Object nextElement()

Example:
import java.util.*;
class EnumerationDemo
{
	public static void main(String[] args)
	{
		Vector v=new Vector();
		for (int i=0;i<=10 ;i++ )
		{
			v.addElement(i);
		}
		System.out.println(v);	//[1,2,3,4,5,6,7,8,9,10]
		Enumeration e=v.elements();
		while (e.hasMoreElements)
		{
			Integer I=(Integer)e.nextElement();
			if (I%2==0)
			System.out.println(I);	//[2,4,6,8,10]
			else 
			{
				System.out.println(I+"will be removed");
				v.remove();
				System.out.println(v);
			}
		}
	}
}

							=========
							 Part 07	
							=========
Collections(I)
	Set(I)
		HashSet		SortedSet(I)
		LinkedHashSet	NavigableSet(I)
				TreeSet


Set is child Interface of Colection.
-If we want to represent a group of individual object as a single entity where duplicate are not allowed and insertion order not preserved.
-Set interface doesnt contain any new method and we have to use only collection interface methods.

HashSet:
--------
1.The underlying datastructure is HashTable.
2.Duplicate objects are not allowed.
3.Insertion order is not preserved and its based on hashcode of objects.
4.Null insertion is possible(only once).
5.Heterogenous objects are allowed.
6.Implements Serializable and Cloneable but not RandomAccess Interface.
7.HashSet is best choice if our frequent operation is search operations.

Note:
In HashSet Duplicates are not allowed if we are trying to insert duplicates then we wont get any Compile time or runtime error and add method simply 
return false.
Example:
	Hashset h=new HashSet();
	System.out.println(h.add("A"));	//true 
	System.out.println(h.add("A"));	//false

Constructors:
-------------
1.HashSet h=new HashSet();
	Creates and empty Hashset with default initial capacity of 16 and default fill ratio 0.75

2.HashSet h=new HashSet(int initialCapacity);
	creates an empty hashset object with specified inital capacity with default initial ratio of 0.75

3.HashSet h=new HashSet(Int initialCapacity,float fillratio);

4.HashSet h=new HashSet(Collections);
	Creates an equivalent HashSet for the given Collection.This constructor meant for interconvention between collection Objects.


Fill Ratio or Load Factor:
--------------------------
After filling how much ratio a new HashSet Object will be created, this ratio is called fill ratio or Load Factor.
eg.
After filling 75% ratio A new hashset object will be created


==========================================================
						Part-08: TreeSet 
						=================
1.The underlying datasture is balanced tree
2.Insertion order not preserved.
3.Duplicates are not allowed.
4.Heterogenous object are not allowed otherwise we will get error saying class cast Exception.
5.Null insertion is possible(only once).
6.TreeSet implements Serializable and Cloneable but not RandomAccess.
7.All object will be inserted based on some sorting order it may be default natural sorting 
order or customized sorting order.

Constructors:
-------------
1.TreeSet t=new TreeSet();
	Creates an empty treeset object where the element will be inserted according to default
	sorting order.
2.TreeSet t=new TreeSet(Comparator c);
	Creates an empty treeset object where the element will be inserted according to customized 
	sorting order specified by comparator object.
3.TreeSet t=new  TreeSet(Collection c);
4.TreeSet t=new TreeSet (SortedSet s);

Example:
class Test
{
	public static void main(String[] args){
		TreeSet t=new TreeSet();
		t.add("A");
		t.add("a");
		t.add("B");
		t.add("Z");
		t.add("L");
		//t.add(new Integer(10)); //CCE
		//t.add(null); //NPE
		System.out.println(t);	[A,B,L,Z,a]
	}
}	

Null acceptance:
----------------
1.For non-empty TreeSet if we are trying to insert null then we will get NullPointerException.
2.For empty TreeSet as first element null is allowed but after inserting null if we are trying
any other then we will get runtime exception saying NullPointerException(NPE).

Note:
Until 1.6 version null is allowed as first element to the empty TreeSet but from 1.7 version 
onward null is not allowed even as first as first element. 
i,e null such type of story not applicable for TreeSet from 1.7 onward.


Example:
import java.util.*;
class TreeSetDemo
{
	public static void main(String[] args){
		TreeSet t=new TreeSet();
		t.add(new StringBuffer("A"));
		t.add(new StringBuffer("Z"));
		t.add(new StringBuffer("L"));
		t.add(new StringBuffer("B"));
		System.out.println(t);
	}
}

RE:ClassCastException

Note:
If we are depending on default natural sorting order compulsory the object should be homogenous 
and Comparable otherwise we will get runtime exception saying ClassCastException.

An object is said to be Comparable if and only if corresponding class implements Comparable interface.
String class and all wrapper classes already implements Comparable interface.
But StringBuffer class doesnt implement Comparable interface hence we got ClassCastException 
in the above example.

Comparable(I)
-------------
-It is present in java.lang package and it contains only one method compareTo().

public int compareTo(Object obj)
 obj1.compareTo(obj2)
	-Return -ve if obj1 has come before obj2
	-Return +ve if obj1 has come After obj2
	-Return 0 if obj1 and obj2 are equal

Example:
class Test
{
	public static void main(String[] args){
		System.out.println("A".compareTo("Z"));	-ve
		System.out.println("Z".compareTo("K"));	+ve
		System.out.println("A".compareTo("A"));	0
		System.out.println("A".compareTo(null));	RE:NPE
	}
}

If we are depending on default natural sorting order then while adding object to the TreeSet 
JVM will call compareTo() method.
TreeSet t=new TreeSet ();
t.add("K");
t.add("Z");==>"Z".compareTo("K");	+ve
t.add("A");==>"A".compareTo("K");	-ve
t.add("A");==>"Z".compareTo("K"); and ==>"A".compareTo("A"); 0
sopen(t);	[A,K,Z]

Note:
-If natural sorting order not available or if we are not satisfied natural sorting order then we 
can go for costomized sorting by using Comparator.
-Comparable meant for natural sorting order where Comparator meant for customized sorting order.


						Part-09:Comparator(I):
						=====================
Comparator(I):
-----------
-Comparator present in java.util package and it define two methods compare() and equals().

public int compare(Object obj1,Object obj2)
	-Return -ve if obj1 has come before obj2
	-Return +ve if obj1 has come After obj2
	-Return 0 if obj1 and obj2 are equal

public boolean equals(Object obj)

Note:
Whenever we are implementing Comparator interface compulsory we should provide implemenation 
only for compare() method and we are not required to provide implemetation for equals()
because it is already available to our class from object class through inheritance.


Qn:
Write a program to insert integer object into treeset where sorting order is 

Example:
import java.util.*;
class TreeSetDemo3
{
	public static main(String[] args)
	{
		TreeSet t=new TreeSet(new MyComparator());
		t.add(10);
		t.add(0);
		t.add(15);
		t.add(5);
		t.add(20);
		t.add(20);
		System.out.println(t);
	}
}

class MyComparator implements Comparator
{
	public int compare(Object obj1,Object Obj2)
	{
		Integer I1=(Integer)obj1;
		Integer I2=(Integer)obj2;
		return 0;
	}
}




////////
eg:
import java.util.*;
class Test
{
	public static void main(String[] args)
	{
		TreeSet t=new TreeSet(new MyComparator()); //Line-1
		t.add(10);
		t.add(0);
		t.add(15);
		t.add(5);
		t.add(20);
		t.add(20);
		System.out.println(t);
	}
}

class MyComparator implements Comparator
{
	public int compare(Object obj1,Object Obj2)
	{
		Integer I1=(Integer)obj1;
		Integer I2=(Integer)obj2;
		if (I1<I2)
			return +1;
		else if (I1>I2)
			return -1;
		else 
			return 0;

		//retun I1.compareTo(I2); Default natural sorting order [0,5,10,15,20]
		//retun -I1.compareTo(I2);Descending order[20,15,10,5,0]
		//retun I2.compareTo(I1);Descending order[20,15,10,5,0]
		//retun -I2.compareTo(I1);Ascending order [0,5,10,15,20]
		//return +1; Insertion order[10,0,15,5,20,20]
		//return -1;Reverse of insertion order [20,20,5,15,0,10]
		//return 0;only first element will be inserted all remaining are considered as duplicates [10]

	}
}

At line-1 if we are not passing Comparator Object internally JVM will call compareTo()
method which is meant for default sorting order [0,5,10,15,20]

At line-1 if we are passing Comparator Object then JVM will call compare() method 
which is meant for customized sorting order [20,15,10,5,0]
========================================================================================


				Part-10:String Object in TreeSet
				================================
Qn:
Write a program to insert string object into treeset where all element should be inserted 
according to reverse of alphabetical order.

import java.util.*;
class TreesetDemo2
{
	TreeSet t=new TreeSet(new myComparator)
	{
		t.add("eurad");
		t.add("edmund");
		t.add("elisha");
		t.add("timothy");
		t.add("mody");
		t.add("Tairo");
		System.out.println(t);
	}
}
class myComparator implements Comparator
{
	public int compare(Object obj1,Object obj2)
	{
		String s1=(String)obj1;
		String s2=obj2.toString();
		return s2.compareTo(s1);
		//return -s1.compareTo(s2);
	}
}

Qn:
Write a program to insert StringBuffer object to TreeSet where sorting order is alphabetical order.

import java.util.*;
class Test
{
		public static void main(String[] args)
		{
		TreeSet t=new TreeSet(new myComparator());
		t.add(new StringBuffer("eurad"));
		t.add(new StringBuffer("edmund"));
		t.add(new StringBuffer("elisha"));
		t.add(new StringBuffer("timothy"));
		t.add(new StringBuffer("mody"));
		t.add(new StringBuffer("tairo"));
		System.out.println(t);
	}
}
class myComparator implements Comparator
{
	public int compare(Object obj1,Object obj2)
	{
		String s1=(String)obj1;
		String s2=obj2.toString();
		return s1.compareTo(s2); //[edmund, elisha, eurad, mody, tairo, timothy]
	}
}

Note: 
If we are depending on default natural sorting order complsory object should be homogenous and
comparable otherwise we will get get runtime exception saying ClassCastException.

If we are defining our own sorting by comparator then objects needs not comparable and homogenous 
i,e we can add heterogenous non-comparable object also

Qn:
Write a program to insert String and StringBuffer object to TreeSet where sorting order is 
increasing length order.
If two object having same length then consider alphabetical order.

class TreeSetDemo
{
	public static void main(String[] args)
	{
		TreeSet t=new TreeSet(new myComparator);
		t.add("A");
		t.add(new StringBuffer("ABC"));
		t.add(new StringBuffer("AA"));
		t.add(new StringBuffer("XX"));
		t.add(new StringBuffer("A"));
		System.out.println(t); //[A, AA, XX, ABC, ABCD]
	}
}
class myComparator implements Comparator 
{
	public int compare(Object obj1,Object obj2)
	{
		String s1=obj1.toString();
		String s2=obj2.toString();
		int l1=s1.length();
		int l2=s2.length();
		if (l1<l2)
			return -1;
		else if (l1>l2)
			return +1;
		else 
			return s1.compareTo(s2);
	}
}


Comparable vs Comparator:
-------------------------
For pre-defined comparable classes natural sorting order already available.If we are not satisfied
with that default sorting order then we can define our own sorting by using comparator.

For pre-defined non-comparable classes like StringBuffer default natural sorting order not already
available we can define our own sorting by using comparator.

For our own classes like Employee, The person who writing the class is responsible to define 
default natural sorting order by implementing comparable interface.

The person who using our class, If is not satisfied with natural sorting order then can define 
his own sorting using comparator.
.
.
.
.
.
.

					Part-11:Map HashMap LinkedHashMap
					==================================
-Map is not child interface of Collection.
-If we want to repsent a group of objects as key value pairs then we should go for map.
eg:
Key		value
----    -----
100		eurad
101		emma
102		eddy
103		selina

-Both keys and values are objects only.
-Duplicate keys are not not allowed but values can be duplicated.
-Each key value pair is called entry hence map is considered as a collection of entry objects.

Map interface Methods:
----------------------
1.Object put(Object key,Object value)
-To add one key value pair to the map.
-if the key is already present then old value will be replaced with new value and returns old value.

eg:
m.put(101,"eurad"); //the value will be repalced with eddy and returns null 
m.put(102,"emma"); //return null
m.put(101,"eddy") //return durga 

2.void putAll(Map m)
	To add group of key value pair.
3.Object get(Object key)
	Return the value associated with specified key.
4.Object remove(Object key)
	Removes the entry associated with specified key.
5.boolean containsKey(Object Key)
6.boolean containsValue(Object value)
7.boolean isEmpty()
8.int size()
9.void clear()

Collection views of Map:
------------------------
1.Set keySet()
2.Collection values()
3.Set entrySet()

Entry(I):
--------
-A map is a group of key value pairs and each key value pair is called as an entry hence Map is
considered as collection of entry objects.
-Without existing map object there is no chance of existing entry object hence entry interface 
is defined inside Map interface.

eg:
interface Map{
	.
	.
	.
	interface Entry{
		Object getKey()		//Entry specific methods and can apply only
		Object getValue()	// on Entry object	
		Object setValue(Object new)
	}
}

HashMap:
-------
1.The underlying datastructure is Hashtable.
2.Insertion order is not preserved and it is based on hashcode of keys.
3.Duplicate keys are not allowed but values can be duplicated.
4.Heterogenous objects are allowed for both key and value.
5.Null is allowed for key(only once)
6.Null is allowed for values(any number of times).
7.HashMap implements Serializable and Cloneable interface but not RandomAccess.
8.HashMap is best choice if our frequent operation is search operation.

Constructor of HashMap:
-----------------------
1.HashMap m=new HashMap();
	creates an empty hashmap object with default initial capacity 16 and default fill ratio 0.75.
2.HashMap m=new HashMap(int initialCapacity);
	Creates an empty hashmap object with specified initial capacity and Default fill ratio 0.75
3.HashMap m=new HashMap(int initialCapacity,float fillratio);
4.HashMap m=new HashMap(Map m);

eg:
import java.util.*;
class HashMapDemo{
	public static void main(String[] args){
		HashMap m=new HashMap();
		m.put("eurad",700);
		m.put("emma",800);
		m.put("eddy",200);
		m.put("selina",500);
		System.out.println(m);
		System.out.println(m.put("eurad",1000);
		Set s=m.keySet();
		System.out.println(s);
		Collection c=m.values();
		System.out.println(c);
		Set s1=m.entrySet();
		SC
		Iterator itr=s1.iterator();
		while(itr.hasNext()){
			Map.Entry m1=(Map.Entry)itr.next();
			System.out.println(m1.getKey() + "...." + m1.getvalue());
			if (m1.getKey().equals("emma")){
				m1.setValue(10000);
			}
		}
		System.out.println(m);

	}
}

HashMap vs Hashtable:
---------------------
HashMap:
1.Every method present in hashmap is non-synchronized.
2.At time multiple thread is allowed to operate on hashmap object and hence it is not thread safe.
3.Relatively performance is high because threads are not required to wait to operate on hashMap
object.
4.Null is allowed for key and value.
5.Introduced in 1.2 and it is not legacy.

Hashtable:
1.Every method present in hashtable is synchronized.
2.At time only one thread is allowed to operate on hashtable object and hence it is thread safe.
3.Relatively performance is low because threads are  required to wait to operate on hashtable 
object.
4.Null is not allowed for key and value otherwise we will get null pointer exception.
5.Introduced in 1.0 and it is legacy.

How to get synchronized version HashMap object.
----------------------------------------------
By default HashMap is non-synchronized but we can get synchronized version of HashMap by using 
synchronized map method of Collection class.

HashMap m=new HashMap();
Map m1=Collections.synchronizedMap(m);


			Part-12: LinkedHashMap:
			=======================
1.It is child class of HashMap.
2.it is exactly same as HashMap(including method and constructor) except following differences.

HashMap:
1.The underlying datastructure is Hashtable.
2.Insertion order is not preserved and it is based on hashcode of keys.
3.Introduced in 1.2 version.

LinkedHashMap:
1.The underlying datastructure is combination of LinkedList and Hashtable(Hybrid datastructure).
2.Insertion order is preserved.
3.Introduced in 1.4 version.

In previous HashMap program if we replace HashMap with LinkedHashMap then output is 
{eurad=700, emma=800, eddy=200, selina=500} that is insertion order is preserved.

Note:
LinkedHashSet and LinkedHashMap are commonly used for developing cache based applications.

Differnce between == and .equals() methods:
-------------------------------------------
In general == operator meant for reference comparison(address comparison) whereas .equals() 
meant for content comparison.

eg:
Integer I1=new Integer(10);
Integer I2=new Integer(10);
System.out.println(I1==I2); //false 
System.out.println(I1.equals(I2)); //true 

IdentityHashMap:
----------------
-It is exactly same as HashMap(including method and constructors) except the following difference
-Incase of normal hashmap jvm will use .equals() method to identify duplicate keys,which is 
  meant for content comparison.
-But in case of identityHashMap jvm will use == operator to identify duplicate keys which is 
 meant for reference comparison(address comparison)

eg:
import java.util.*;
class IdentityHashMapDemo{
	public static void main(String[] args){
		HashMap m=new HashMap();
		Integer I1=new Integer(10);
		Integer I1=new Integer(10);
		m.put(I1,"eurad");
		m.put(I2,"emma");
		System.out.println(m);
	}
}

-I1 and I2 are duplicate keys because I1.equals(I2) returns true.
-If we replace HashMap with IdentityHashMap then I1 and I2 are not duplicate keys because 
I1==I2 returns false. In this case output is {10=eurad,10=emma}

WeakHashMap:
-----------


Part-13:SortedMap
==================
Part-14:hashtable
==================
Part-15:
Aprt-16:
Part-17:Seaching element in lists
==================================
Part-18:Arrays
===============
