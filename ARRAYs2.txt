ARRAY
-----
1.INTRODUCTION
2.ARRAY DECLARATION
3.ARRAY CREATION 
4.ARRAY INITIALIZATION 
5.ARRAY DECLARATION,CREATION & INITIALIZATION IN ASINGLE LINE
6.length vs length()
7.Anonymous Arrays
8.Array element assignments
9.Array variable assignments


1.Introduction
---------------
Array is INDEXED collection of FIXED number of HOMOGENOUS elements.
Array is used to represent huge number of values using single variable.
Readability is code improved.
int[] x= new int[1000]

Limitations of Array:
1.Array is fixed in size. Once created there is no chance to increase or decrease.
2.Array carries homogenous data types.

2.ARRAY DECLARATION:
====================
int[] x;
int []x;
int x[];

All of array declaration above is valid. But int[] x is mostly recommended b'se name is claerly separated from type. 

Note01:
In time of creation we cant specify the size of array. We can specify in time of declation.
int[6] x;	Invalid  Compile error.()
int[] x;	 Valid

Two Dimension Array
-------------------
int[][] x;
int [][]x;
int x[][];

int[] []x;
int[] x[];
int []x[];

All above declaration are valid for two Dimension array;

Which of the Folowing are Valid 
int[] a,b;	a->1,b->1
int[] a[],b;	a->2,b->1
int[] a[],b[];	a->2,b->2
int[] []a,b;	a->2,b->2
int[] []a,b[];	a->2,b->3
int[] []a,[]b;	CE(compile Error)

NOTE02:If we want to specify the dimension before the variable, the fisility is aolicable only for first varibale in a declaration.
if we are trying to apply for remaining variables we will get Compile Error.

int[] []a,[]b,[]c;	for []a is valid but []b and []c violate the above rule.


Three Dimension Array Declaration:
----------------------------------
int[][][] a;
int [][][]a;
int a[][][];
int[] [][]a;
int[] a[][];
int[] []a[];
int[][] []a;
int[][] a[];
int [][]a[];
int []a[][];


above declaration are valid.


ARRAY CREATION
--------------
Every array in Java is an Object only hence we can create array by using new operator.
int[] a=new int[3]; 

For every array type corresponding classess are available.(For objects is created for only classes)
And these classes are part of java language and not available for programmer level

Example:
class Test
{
	public static void main(String [] args)
	{
		int[] x=new int[3];	//  [I
		int[] x=new int[3];	//  [[I	
		System.out.print(x.getClass().getName()
	}
}


Array type with correspong class type
int[]		->[I
int[][]		->[[I
double[]	->[D
short[]		->[S
byte		->[B
boolean		->[Z


Consider the following examples;
Example 01:
int[] x=new int[];	Invalid At time of array creation cumpolsory we should specify size of array.
int[] x=new int[6];	Valid 

Example 02:
int[] x=new int[0];	Valid.It Legal to have array of 0 size
class Test
{
	public static void main(String [] args)
	{
		System.out.print(args.length)
	}
}

Example 03:
int[] x=new int[-2];	Invalid.If we try specify array size of int negative value Then we will get RunTime Exception:NegativeArraySizeException

Example 04:
int[] x=new int[x];	Valid
int[]=new int['a']	Valid

byte b=20;
int[] x=new int[b];	Valid

short s=30;
int[] x=new int[s];	Valid

long l=40;
int[] x=new int[l]	Invalid


To specify Array size allowed Data types are byte,char,short, int if we are trying to specify other type then will get CE



ARRAY -PART 2
-------------
Two Dimension Array Creation
In Java Two dimension array not implemented by using matrix style. Sun people followed Array of Arrays approach for Multi-dimension array creation.
The main advantage of this apparoch is memory utilization will be improved.

Specify which is valid and which is invalid

int[] a=new int[];			Invalid: Atleast base size we have to specify
int[] a=new int[3];			Valid
int[][] a=new int[][];			Invalid:Atleast base size we have to specify
int[][] a=new int[3][];			Valid
int[][] a=new int[][4];			Invalid:Without Specify base size you cannot specify next level
int[][] a=new int[3][4];		Valid
int[][][] a=new int[3][4][5];		Valid
int[][][] a=new int[3][4][];		Valid
int[][][] a=new int[3][][5];		Invalid
int[][][] a=new int[][4][5];		Invalid


ARRAY INITILIZATION
---------------------
Once we create an array every element is initialized with default values. If we are not satisfied with default values then we can override 
these values with our customezed values.

Example:
int[] x=new int[3];
x[0]=1;
x[1]=20;
x[3]=30;
x[4]=50; RE(ArrayIndexOutOfBoundException)
x[-4]=50; RE(ArrayIndexOutOfBoundException)
x[2.5]=50; CE(ArrayIndexOutOfBoundException)

Example:
class Test
{
	public static void main(String [] args)
	{
		int[] x=new [3];
		System.out.print(x)	//hashcode
		System.out.print(x[0])	//0

	}
}

Whenever we are trying to print any reference variable internally toString method will be called which is implemented 
by default to return the string in following form classname@hashcode_in_hexadecimal_form

Example:
class Test
{
	public static void main(String [] args)
	{
		int[][] x=new [3][2];
		System.out.print(x)	//hashcode
		System.out.print(x[0])	//hashcode
		System.out.print(x[0][0])//0

	}
}

class Test
{
	public static void main(String [] args)
	{
		int[][] x=new [3][];
		System.out.print(x)	//hashcode
		System.out.print(x[0])	//null
		System.out.print(x[0][0])//RE (RunTime Exception)--you cant ask anything Null

	}
}


ARRAY- PART3:
------------
Array declaration,creation and initilization in a single line.
--------------------------------------------------------------
We can declare,create and initiliaze array in single line(shortcut representation).

Example:
int[] x;	//declaration
x=new int[3];	//creation
x[0]=10;	//initiliazation
x[1]=20;
x[2]=30;

The above line of code can be converted to 
int[] x={10,20,30}

Same to other types
char[] ch={'a','b','c'}
String[] s={"aa","bb","cc"}

We can extend this shortcut even for multi-dimensional array also
int[][] x={{10,20},{10,20,30}}

Example: 
int[][][] x={{{10,20,30},{40,50,60}},{{70,80},{90,100,110}}}

System.out.print(x[0][1][2])	//60
System.out.print(x[1][0][1])	//80
System.out.print(x[2][0][0])	//RE
System.out.print(x[1][2][0])	//RE
System.out.print(x[1][1][1])	//100
System.out.print(x[2][1][0])	//RE

Note:
If we have to use this shortcut compulsory we should perform all activities in single line
if we are trying to divide in multiple line we will get Compile Error

Example:
int[] x={10,20,30} 

Then if we try to divide into multiple line 
int[] x;	//Valid
x={10,20,30}  //CE: Illegal start of Expression



length vs length()
------------------
length is final variable applicable for arrays.
length variable represent the size of array

Example:
int[] x=new int[6];

System.out.print(x.length())	//CE
System.out.print(x.length)	//6

length() is a final method applicable for string object.
length() method returns number of characters present in string. 

Example:
String s="eurad";
System.out.print(s.length())	//5
System.out.print(s.length)	//CE

Note:
length variable applicable for array but not for string objects whereas length() method 
is applicable for string object but not for arrays.

Example:
String[] s={"A","AA","AAA"}

System.out.print(s.length)	//3
System.out.print(s.length())	//CE
System.out.print(s[0].length)	//CE
System.out.print(s[0].length())	//A

In multi-dimensional array length variable represent only base size but not total size.
Example:
int[][] x=new int[6][3];
System.out.print(x.length)	//6 
System.out.print(x[0].length)

There is no direct way to find total length length of multi-dimensinal array.
But indirectly we can find as follows 
x[0].length + x[1].length + x[2].length ....

ANONYMOUS ARRAY
---------------
Sometimes we can declare an array without name such type nameless arrays are called anonymous array.
The main  purpose of anonymous array is just for instant use(one time usage)

We can create anonymous array as follows:
new int[]{10,20,30}

While creating anonymous we cant specify the otherwise we will get CE:
Example:
new int[3]{10,20,30}	//Invalid
new int[]{10,20,30}	//Valid 

We can create multi-dimensional anonymous array also
new int[][]{{10,20,30},{50,60}}

Based in our requirement we can give the name the anonymous array then it is no longer anonymous.
Example:
int[] x=new int[]{10,20,30}


Example:
class Test
{
	public static void main(String [] args)
	{
		sum(new int[]{10,20,30})
	}
	public static void sum(int[] x)
	{
	 int total=0;
	 for (int x1:x)
	 {
		total=total+x1;
	 }
	System.out.print("The sum:" + total)
	}
}
In the above example just to call some method we required an array but after completing some 
method call we not not using that array any more.
Hence for this one time requirement anonymous array array is the best choice.


Array element assignment
-------------------------
case 01:
In case of primitive type array as array element we can provide any type which can be implicit promoted 
to declared type. 

int[] x=new int[5];
x[0]=10;
x[1]='a';

byte b=20;
x[2]=b;

short s=30;
x[3]=s;

x[4]=10l	//ce long data type not allowed 

case02:
in case of object type array as array element we can provide either declared type object or its child class cobject.
Example 1:
Object[] a=new Object[10];
a[0]=new Object();
a[1]=new String("eurad")
a[2]=new Integer(10);

Example02:
Number[] n=new Number[10];
n[0]=new Integer(10);
n[1]=new Double(10.8);
n[2]=new String("eurad")	//CE  


case03:
--------
for interface type array as array element its implementation class objects are allowed.
Example:
Runnable[] r=new Runnable[10];
r[0]=new Thread();
r[1]=new String("eurad")	//Invalid 






















